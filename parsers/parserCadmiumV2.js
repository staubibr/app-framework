'use strict';

import Parser from './parser.js';
import Reader from "../components/chunk-reader.js";
import Metadata from '../data_structures/metadata/metadata.js';
import Subcomponent from '../data_structures/metadata/subcomponent.js';
import Scenario from '../data_structures/scenario/scenario.js';
import ModelAtomic from '../data_structures/metadata/model-atomic.js';
import ModelCoupled from '../data_structures/metadata/model-coupled.js';
import Coupling from '../data_structures/metadata/coupling.js';
import MessageOutput from '../data_structures/simulation/message-output.js';
import MessageState from '../data_structures/simulation/message-state.js';
import Frame from '../data_structures/simulation/frame.js';
import ConfigurationGrid from '../data_structures/visualization/configuration-grid.js';
import MaUtil from './ma-util.js'

/**
 * A parser component to process the common results format
 */
export default class ParserOGSE extends Parser { 
	
	/**                              
	 * Detects the parser to use. 
	 * @return {String} A string identifying the parser to use ("CDpp-Cell-DEVS", "Cadmium-V1" or "OGSE")
	 */		
	static detect(files) {
		if (!files.find(f => f.name.toLowerCase().endsWith('config.json'))) return false;
		
		if (!files.find(f => f.name.toLowerCase().endsWith('log.csv'))) return false;
		
		return true;
	}
	
	constructor(files) {
		super(files);
		
		this.files.config = files.find(f => f.name.toLowerCase().endsWith('config.json'));
		this.files.log = files.find(f => f.name.toLowerCase().endsWith('log.csv'));
	}
	
	/**                              
	 * Parses the visualization.json file
	 * @return {Configuration} a visualization configuration file
	 */		
	async default_visualization() {
		var viz = new ConfigurationGrid();
		var j_config = await Reader.read_as_json(this.files.config);
		
		j_config.scenario.state.forEach((s, i) => {			
			viz.styles.push(s.colors.map((c, j) => {
				return { start:s.breaks[j], end:s.breaks[j + 1], color:c };
			}));
			
			viz.add_layer(0, [s.field], i);
		});
		
		viz.columns = viz.layers.length > 3 ? 3 : viz.layers.length;
		
		return viz;
	}
	
	/**                              
	 * Parses the metadata.json file
	 * @return {ModelCoupled} the coupled model metadata
	 */		
	async parse_metadata() {		
		var j_config = await Reader.read_as_json(this.files.config);
		
		var id = j_config.cells.default.cell_type;
		var metadata = new Metadata("top", "top");		
		var fields = j_config.scenario.state.map(s => s.field);
		var dim = j_config.scenario.shape;
		
		if (dim.length == 2) dim[2] = 1;
		
		var type = MaUtil.add_coupled_grid(metadata, id, fields, dim);
		var curr = MaUtil.add_subcomponent(metadata, type, id, type.id);
		
		var a = MaUtil.add_atomic(metadata, `${id}-cell`, fields);
		
		type.build_index(metadata, a);
		
		return metadata;
	}

	/**                              
	 * Parses the messages file (name changes according to parser)
	 * @return {Frame[]} an array of Frame objects
	 */		
	async parse_messages(simulation) {
		return this.parse_csv(simulation, d => d[0], this.parse_line);
	}
	
	/**                              
	 * Parses a line from the messages.log. Adds it to the frame provided.
	 * @param {Frame} frame - a time frame for the simulation
	 * @param {Structure} structure - the structure object for a simulation
	 * @param {string} emitter - the emitter of the message
	 * @param {string} values - the value contained in the message
	 */	
	parse_line(frame, simulation, data) {
		// model_id is some kind of internal id generated by the simulator
		// model_name has the id assigned by OGSE
		// time;model_id;model_name;port_name;data		
		var xyz = data[2].slice(1,-1).split(",").map(v => +v);
		var grid = simulation.types[1];
		var cell = grid.get_cell(xyz[0], xyz[1], xyz[2] ?? 0);
		
		// +v === +v is true when v is a number. It's supposedly faster and safer than isNaN
		var values = data[4].split(",").map(v => +v === +v ? +v : v);

		frame.add_state_message(new MessageState(cell, values));
	}
}